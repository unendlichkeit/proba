{"version":3,"sources":["logo.svg","components/card-list/card.component.js","components/card-list/card-list.component.js","components/searchBox.component.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","src","monster","id","name","email","CardList","monsters","map","current","key","SearchBox","type","placeholder","onChange","handleChange","App","event","setState","searchField","target","value","console","log","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","logo","alt","href","rel","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,6PCI9BC,G,YAAO,SAACC,GAEjB,OAAO,yBAAKC,UAAU,kBAClB,yBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACPJ,EAAMG,QAAQE,KACf,2BAAIL,EAAMG,QAAQG,UCJbC,G,MAAW,SAACP,GACrB,OACA,yBAAKC,UAAU,aACVD,EAAMQ,SAASC,KAAI,SAAAC,GAAO,OACvB,kBAAC,EAAD,CAAMC,IAAKD,EAAQN,GAAID,QAASO,U,MCNrC,SAASE,EAAWZ,GACvB,OACI,2BAAOC,UAAU,YAAYY,KAAK,SAASC,YAAad,EAAMc,YAAaC,SAAUf,EAAMgB,e,IC+DpFC,E,kDA5DX,aAAe,IAAD,uBACV,gBAiBJD,aAAe,SAACE,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,QAAQ,WAC7CC,QAAQC,IAAI,EAAKC,WApBX,OAMV,EAAKA,MAAQ,CACTjB,SAAU,GACVY,YAAa,IARP,E,gEAYO,IAAD,OAChBM,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACX,SAAUsB,S,+BASlC,IAAD,EAC4BC,KAAKN,MAA9BjB,EADH,EACGA,SAAUY,EADb,EACaA,YAEZY,EAAmBxB,EAASyB,QAAO,SAAA9B,GACrC,OAAOA,EAAQE,KAAK6B,cAAcC,SAASf,EAAYc,kBAG3D,OACA,yBAAKjC,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKC,IAAKkC,IAAMnC,UAAU,WAAWoC,IAAI,UAG7C,6CAEA,kBAACzB,EAAD,CAAWI,aAAce,KAAKf,aAC1BF,YAAY,gBAEhB,kBAAC,EAAD,CAAUN,SAAUwB,IAGpB,uBACI/B,UAAU,WACVqC,KAAK,sBACLjB,OAAO,SACPkB,IAAI,uBAJR,oB,GA9CMC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.6e9c0dc6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) => { \r\n\r\n    return <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set3&size=140x140`}/>\r\n        {props.monster.name}\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n};\r\n","import React from 'react';\r\nimport {Card} from './card.component';\r\n\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = (props) => { \r\n    return (\r\n    <div className='card-list'>\r\n        {props.monsters.map(current => (\r\n            <Card key={current.id} monster={current}/>\r\n        ))}\r\n    </div>\r\n    );\r\n}","import React from 'react';\r\nimport './card-list/searchBox.style.css';\r\n\r\nexport function SearchBox (props) {\r\n    return (\r\n        <input className=\"searchBox\" type=\"search\" placeholder={props.placeholder} onChange={props.handleChange}/>\r\n    );\r\n};","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/searchBox.component';\n\n\nclass App extends React.Component {\n    constructor() {\n        super();\n\n        var x = \"this is x\";\n        var y = \"tthis is y\";\n\n        this.state = {\n            monsters: [],\n            searchField: ''\n        };\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({monsters: users}));\n    }\n\n    handleChange = (event) => {\n        this.setState({searchField: event.target.value}, ()=>{\n            console.log(this.state);\n        });\n    }\n\n    render() {\n        const { monsters, searchField} = this.state;\n        //creaza un array care contine cardurile filtrate si paseaza noul array in loc de arrayul monsters din state\n        const filteredMonsters = monsters.filter(monster => {\n            return monster.name.toLowerCase().includes(searchField.toLowerCase())\n        });\n\n        return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </header>\n\n            <h1>awesome title</h1>\n\n            <SearchBox handleChange={this.handleChange} \n                placeholder=\"search name\" />\n\n            <CardList monsters={filteredMonsters}/>\n\n\n            <a\n                className=\"App-link\"\n                href=\"https://reactjs.org\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                Learn React\n            </a>\n            \n        </div>\n        );\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}